from functools import partial

import numpy as np
from attrs import define, field
from attrs.validators import ge, instance_of, le
from botorch.acquisition.analytic import UpperConfidenceBound

from sva.logger import logger

from ..base import RequiresBayesOpt


def _sigmoid(x, a=1.0, b=0.0, c=1.0):
    return a / (1.0 + np.exp(-c * (x + b)))


@define(kw_only=True)
class SigmoidBetaAnnealingPolicy(RequiresBayesOpt):
    """A special type of meta policy which uses some combination of policies
    to first explore the space, then exploit it. This one uses a meta policy
    where the explore/exploit parameter Î² is annealed from some large value
    corresponding to high priority on exploration, to some low value,
    corresponding to a high priority on exploitation."""

    max_beta = field(default=100.0, validator=instance_of((float, int)))
    min_beta = field(default=5.0, validator=instance_of((float, int)))
    sharpness = field(default=0.2, validator=instance_of((float, int)))
    p_change = field(
        default=0.5, validator=[instance_of(float), ge(0.05), le(0.95)]
    )
    _current_beta = field(default=None)

    @property
    def name(self):
        b1 = self.min_beta
        b2 = self.max_beta
        s = self.sharpness
        p = self.p_change
        n = self.__class__.__name__
        return f"{n}-minbeta-{b1:.02f}-maxbeta-{b2:.02f}-s-{s:.02f}-p-{p:.02f}"

    def _get_beta(self, n):
        b = self.p_change * self.n_max
        c = self.sharpness
        top = self.max_beta
        bottom = self.min_beta
        return _sigmoid(-n, 1.0, b, c) * (top - bottom) + bottom

    def _get_acqf_at_state(self, experiment, data):
        n = data.N
        beta = self._get_beta(n)
        if self.optimize_kwargs["q"] > 1:
            raise ValueError("This policy isn't supported yet for q>1")
        self._current_beta = beta
        logger.info(f"n={n} beta value set to {beta:.04f}")
        acqf = partial(UpperConfidenceBound, beta=beta)
        return acqf

    def _get_metadata(self, experiment, data):
        d = {
            "experiment": experiment.name,
            "policy": self.name,
            "beta": self._current_beta,
        }
        self._current_beta = None
        return d
